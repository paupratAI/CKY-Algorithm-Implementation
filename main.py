def parse_grammar(grammar):
    """
    Parses the grammar rules from a list of strings.
    
    Args:
    grammar (list of str): The list of grammar rules in the form "LHS -> RHS".
    
    Returns:
    dict: A dictionary where keys are the left-hand side (LHS) of the rules
          and values are lists of right-hand side (RHS) alternatives.
    """
    rules = {}
    for rule in grammar:
        lhs, rhs = rule.split("->")
        lhs = lhs.strip()
        rhs = [r.strip() for r in rhs.split("|")]
        rules[lhs] = rhs
    return rules

def is_cnf(grammar):
    """
    Checks if the given grammar is in Chomsky Normal Form (CNF).
    
    Args:
    grammar (list of str): The list of grammar rules.
    
    Returns:
    bool: True if the grammar is in CNF, False otherwise.
    """
    rules = parse_grammar(grammar)
    for lhs, rhs_list in rules.items():
        for rhs in rhs_list:
            # Rule must be of the form X -> Y1Y2 or X -> a
            if len(rhs) == 1:
                # Single terminal symbol (must be lowercase)
                if not rhs.islower():  # rhs is a single terminal
                    return False
            elif len(rhs) == 2:
                # Two non-terminal symbols (must be uppercase)
                if not (rhs[0].isupper() and rhs[1].isupper()):
                    return False
            else:
                return False
    return True


def cky_algorithm(grammar, word):
    """
    Implements the Cocke-Kasami-Younger (CKY) algorithm to determine if a word 
    can be generated by a given grammar.
    
    Args:
    grammar (list of str): The list of grammar rules.
    word (str): The word to be tested.
    
    Returns:
    bool: True if the word can be generated by the grammar, False otherwise.
    """
    rules = parse_grammar(grammar)
    n = len(word)
    table = [[set() for _ in range(n)] for _ in range(n)]
    
    # Fill the diagonal of the table
    for j in range(n):
        for lhs, rhs_list in rules.items():
            for rhs in rhs_list:
                if rhs == word[j]:
                    table[j][j].add(lhs)
        # Fill the table
        for i in range(j-1, -1, -1):
            for k in range(i+1, j+1):
                for lhs, rhs_list in rules.items():
                    for rhs in rhs_list:
                        if len(rhs) == 2 and rhs[0] in table[i][k-1] and rhs[1] in table[k][j]:
                            table[i][j].add(lhs)
    
    return 'S' in table[0][n-1]

def read_input_file(file_path):
    """
    Reads a file containing grammars and words, and organizes them into a list of tuples.
    
    Args:
    file_path (str): The path to the input file.
    
    Returns:
    list of tuples: Each tuple contains a list of grammar rules and a list of words.
    """
    grammars_and_words = []
    with open(file_path, 'r') as file:
        lines = file.readlines()
        
        grammar = []
        words = []
        for line in lines:
            line = line.strip()
            if not line:
                if grammar and words:
                    grammars_and_words.append((grammar, words))
                    grammar = []
                    words = []
            elif '->' in line:
                grammar.append(line)
            else:
                words.append(line)
        
        if grammar and words:
            grammars_and_words.append((grammar, words))
    
    return grammars_and_words

def write_output_file(output_path, grammars_and_words):
    """
    Writes the results of the CKY algorithm to an output file.
    
    Args:
    output_path (str): The path to the output file.
    grammars_and_words (list of tuples): Each tuple contains a list of grammar rules 
                                         and a list of words.
    """
    with open(output_path, 'w') as file:
        for grammar, words in grammars_and_words:
            file.write("Grammar:\n")
            for rule in grammar:
                file.write(rule + "\n")
            file.write("Results:\n")
            for word in words:
                result = cky_algorithm(grammar, word)
                file.write(f"{word}: {result}\n")
            file.write("\n")

def main():
    """
    Main function to read input, check if grammars are in CNF, execute the CKY algorithm, and write the output.
    """
    input_file_path = 'input.txt'
    output_file_path = 'output.txt'
    grammars_and_words = read_input_file(input_file_path)

    with open(output_file_path, 'w') as file:
        for grammar, words in grammars_and_words:
            file.write("Grammar:\n")
            for rule in grammar:
                file.write(rule + "\n")
            
            if is_cnf(grammar):
                file.write("The grammar is in CNF.\n")
            else:
                file.write("The grammar is NOT in CNF.\n")
            
            file.write("Results:\n")
            for word in words:
                result = cky_algorithm(grammar, word)
                file.write(f"{word}: {result}\n")
            file.write("\n")
    
    print(f"Results written to {output_file_path}")

if __name__ == "__main__":
    main()
