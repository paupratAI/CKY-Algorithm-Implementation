from cfg import CFG
from Pcfg import PCFG
from tabulate import tabulate
import tkinter as tk

def read_input_file(file_path):
    """
    Reads a file containing grammars and words, and organizes them into a list of tuples.
    
    Args:
    file_path (str): The path to the input file.
    
    Returns:
    list of tuples: Each tuple contains a list of grammar rules and a list of words.
    """
    grammars_and_words = []
    with open(file_path, 'r') as file:
        lines = file.readlines()
        
        grammar = []
        words = []
        for line in lines:
            line = line.strip()
            if not line:
                if grammar and words:
                    grammars_and_words.append((grammar, words))
                    grammar = []
                    words = []
            elif '->' in line:
                grammar.append(line)
            else:
                words.append(line)
        
        if grammar and words:
            grammars_and_words.append((grammar, words))
    
    return grammars_and_words



def matrix_to_str(matrix, probabilistic=False):
    def format_dict(cell_dict, probabilistic=False):
        if not cell_dict:
            return ''
        if probabilistic:
            return ', '.join(f'{k}: {v:.2g}' for k, v in sorted(cell_dict.items()))
        return ','.join(sorted(cell_dict))

    # Create a formatted matrix
    formatted_matrix = []
    for row in matrix:
        formatted_row = [format_dict(cell, probabilistic) for cell in row]
        formatted_matrix.append(formatted_row)

    # Use tabulate to create a nice table representation
    table = tabulate(formatted_matrix, tablefmt="grid")
    return table


def write_grammar(file, result, is_in_CNF=True, probabilistic=False, print_cky_table=1):
    """
    Writes the grammar rules and results to an output file.

    Parameters:
    file (file object): The output file to write the grammar rules and results.
    result (tuple): A tuple containing the grammar rules and results.
    is_in_CNF (bool, optional): Indicates whether the grammar is in Chomsky Normal Form (CNF). Defaults to True.
    probabilistic (bool, optional): Indicates whether the grammar is probabilistic. Defaults to False.
    print_cky_table (int, optional): Indicates whether to print the CKY table. Defaults to 1.

    Returns:
    None

    """
    if is_in_CNF:
        grammar, words_results = result
    else:
        grammar, grammar2, words_results = result
    
    if not is_in_CNF: # If the grammar is not in CNF
        file.write("Original Grammar:\n")
        for rule in grammar:
            file.write(rule + "\n")
        file.write("\n")
        file.write("Grammar is not in CNF\n")
        file.write("\n")

        file.write("Converted into CNF Grammar:\n")
        for rule in grammar2:
            file.write(rule + "\n")
        file.write("\n")



    else: # If the grammar is already in CNF

        for rule in grammar:
            file.write(rule + "\n")
        file.write("\n")
        file.write("Grammar is in CNF\n")


    file.write("Results:\n\n")
    for word, result, table in words_results:

        if probabilistic: # If the grammar is probabilistic
            if result:
                probability = table[0][len(table)-1].get('S', 0)  # Use get to avoid KeyError if 'S' is not in the dictionary
                file.write(f"{word}: True with a probability of {probability}\n\n")
            else:
                file.write(f"{word}: False\n\n")
            

        else: # If the grammar is not probabilistic
            file.write(f"{word}: {'True' if result else 'False'}\n\n")

        if print_cky_table == 1: # If the user wants to print the CKY table
            file.write(f"Table generated by the CKY algorithm:\n")
            if probabilistic:
                table = matrix_to_str(table, probabilistic=True)
            else: 
                table = matrix_to_str(table)
            file.write(f"{table}")
            file.write("\n\n\n")

    file.write("\n")
    file.write("-" * 40 + "\n")
    file.write("\n")


def write_output_file(output_path, results, print_cky_table, user_choice_file):
    """
    Writes the results of the CKY algorithm to an output file.
    
    Args:
    output_path (str): The path to the output file.
    results (list of tuples): Each tuple contains a list of grammar rules 
                              and a list of results.
    """
    with open(output_path, 'w') as file:

        for result in results:
            if user_choice_file == 1: # If the grammar is a PCFG
                write_grammar(file, result, is_in_CNF=True, probabilistic=True, print_cky_table=print_cky_table)

            elif len(result) == 2: # If the grammar is in CNF
                write_grammar(file, result, is_in_CNF=True, probabilistic=False, print_cky_table=print_cky_table)

            elif len(result) == 3:  # If the grammar is not in CNF
                write_grammar(file, result, is_in_CNF=False, probabilistic=False, print_cky_table=print_cky_table)


def unparse_grammar(rules):
    """
    Converts the grammar rules from a dictionary to a list of strings.
    
    Args:
    rules (dict): A dictionary where keys are the left-hand side (LHS) of the rules
                  and values are lists of right-hand side (RHS) alternatives.
    
    Returns:
    list of str: The list of grammar rules in the form "LHS -> RHS".
    """
    grammar = []
    for lhs, rhs in rules.items():
        rhs = " | ".join(rhs)
        grammar.append(f"{lhs} -> {rhs}")
    return grammar



def get_input(question, option1, option2):
    """
    Front-end function:
    This function creates a window and returns the user's choice.
    """
    # Function to be called when a button is clicked
    def on_button_click(value):
        nonlocal user_choice
        user_choice = value
        root.destroy()  # Close the application window

    user_choice = None

    # Create the main application window
    root = tk.Tk()
    root.title("User Input")

    # Set the window size
    window_width = 700
    window_height = 350

    # Get the screen dimension
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    # Find the center point
    center_x = int(screen_width / 2 - window_width / 2)
    center_y = int(screen_height / 2 - window_height / 2)

    # Set the position of the window to the center of the screen
    root.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')

    # Create a label with the question text
    label = tk.Label(root, text=question, font=("Helvetica", 24), wraplength=600, justify="center")
    label.pack(pady=20)

    # Create and place the buttons
    button1 = tk.Button(root, text=option1, font=("Helvetica", 24), command=lambda: on_button_click(1))
    button2 = tk.Button(root, text=option2, font=("Helvetica", 24), command=lambda: on_button_click(2))

    button1.pack(pady=20)
    button2.pack(pady=20)

    # Run the application
    root.mainloop()

    return user_choice

def main():
    """
    Main function to read input, check if grammars are in CNF, execute the CKY algorithm, and write the output.
    """

    user_choice_file = get_input("Do you want to use a Probabilistic CFG?", "Yes", "No")

    if user_choice_file == 1:    #If the user wants to use a PCFG, read the input file for PCFG
        input_file_path = 'input_PCKY.txt'
        output_file_path = 'output_PCKY.txt'

    else:     # If the user wants to use a CFG, read the input file for CFG
        input_file_path = 'input.txt'
        output_file_path = 'output.txt'


    grammars_and_words = read_input_file(input_file_path)
    results = []
    print_cky_table = get_input("Do you want to print the CKY table on the output file?", "Yes", "No")



    for grammar, words in grammars_and_words:
        grammar2 = None
        if user_choice_file == 1: # If the user wants to use a PCFG, create a new CFG object with the PCFG grammar

            cfg = PCFG(grammar)
        else:    
            cfg = CFG(grammar)

        if not cfg.is_cnf: # If the grammar is not in CNF, create a new CFG object with the CNF grammar
            grammar2 = cfg.cnf_grammar
            grammar2 = unparse_grammar(grammar2)
        
        words_results = [] # List of tuples with the word and the result of the CKY algorithm

        for word in words:
            result = cfg.cky_algorithm(word)
            CKY_table = result[1]
            words_results.append((word, result[0], CKY_table)) 
        
        if grammar2 is not None: # If the grammar was converted to CNF, add it to the results
            results.append((grammar, grammar2, words_results))

        else:
            results.append((grammar, words_results))
    
    write_output_file(output_file_path, results, print_cky_table, user_choice_file)


    if user_choice_file == 1:
        print("Output written to 'output_PCKY.txt'")
    else:
        print("Output written to 'output.txt'")

if __name__ == "__main__":
    main()
